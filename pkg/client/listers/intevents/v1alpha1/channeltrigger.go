/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/knative-gcp/pkg/apis/intevents/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelTriggerLister helps list ChannelTriggers.
type ChannelTriggerLister interface {
	// List lists all ChannelTriggers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelTrigger, err error)
	// ChannelTriggers returns an object that can list and get ChannelTriggers.
	ChannelTriggers(namespace string) ChannelTriggerNamespaceLister
	ChannelTriggerListerExpansion
}

// channelTriggerLister implements the ChannelTriggerLister interface.
type channelTriggerLister struct {
	indexer cache.Indexer
}

// NewChannelTriggerLister returns a new ChannelTriggerLister.
func NewChannelTriggerLister(indexer cache.Indexer) ChannelTriggerLister {
	return &channelTriggerLister{indexer: indexer}
}

// List lists all ChannelTriggers in the indexer.
func (s *channelTriggerLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelTrigger, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelTrigger))
	})
	return ret, err
}

// ChannelTriggers returns an object that can list and get ChannelTriggers.
func (s *channelTriggerLister) ChannelTriggers(namespace string) ChannelTriggerNamespaceLister {
	return channelTriggerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelTriggerNamespaceLister helps list and get ChannelTriggers.
type ChannelTriggerNamespaceLister interface {
	// List lists all ChannelTriggers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelTrigger, err error)
	// Get retrieves the ChannelTrigger from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ChannelTrigger, error)
	ChannelTriggerNamespaceListerExpansion
}

// channelTriggerNamespaceLister implements the ChannelTriggerNamespaceLister
// interface.
type channelTriggerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelTriggers in the indexer for a given namespace.
func (s channelTriggerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelTrigger, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelTrigger))
	})
	return ret, err
}

// Get retrieves the ChannelTrigger from the indexer for a given namespace and name.
func (s channelTriggerNamespaceLister) Get(name string) (*v1alpha1.ChannelTrigger, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channeltrigger"), name)
	}
	return obj.(*v1alpha1.ChannelTrigger), nil
}
